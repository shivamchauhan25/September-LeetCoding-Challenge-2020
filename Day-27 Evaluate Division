Evaluate Division

Problem:

You are given equations in the format A / B = k, where A and B are variables represented as strings, and k is a real number (floating-point number). Given some queries, return the answers. If the answer does not exist, return -1.0.

The input is always valid. You may assume that evaluating the queries will result in no division by zero and there is no contradiction.

 

Example 1:

Input: equations = [["a","b"],["b","c"]], values = [2.0,3.0], queries = [["a","c"],["b","a"],["a","e"],["a","a"],["x","x"]]
Output: [6.00000,0.50000,-1.00000,1.00000,-1.00000]
Explanation: 
Given: a / b = 2.0, b / c = 3.0
queries are: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ?
return: [6.0, 0.5, -1.0, 1.0, -1.0 ]
Example 2:

Input: equations = [["a","b"],["b","c"],["bc","cd"]], values = [1.5,2.5,5.0], queries = [["a","c"],["c","b"],["bc","cd"],["cd","bc"]]
Output: [3.75000,0.40000,5.00000,0.20000]
Example 3:

Input: equations = [["a","b"]], values = [0.5], queries = [["a","b"],["b","a"],["a","c"],["x","y"]]
Output: [0.50000,2.00000,-1.00000,-1.00000]

Solution:
C++:

class Solution {
public:
    vector<double> calcEquation(vector<vector<string>>& equations, vector<double>& values, vector<vector<string>>& queries) {
        
        unordered_map<string, vector<pair<double,string>>> graph;
        
        int n=equations.size();
        for(int i=0; i<n; i++)
        {
            auto& equation=equations[i];
            graph[equation[0]].push_back({values[i], equation[1]});
            graph[equation[1]].push_back({1.0/values[i], equation[0]});
        }
        
        vector<double> ans;
        for(auto& query : queries)
        {
            unordered_set<string> visited;
            ans.push_back(dfs(graph, query[0], query[1], 1.0, visited));
        }
        
        return ans;
    }
    
    double dfs(unordered_map<string, vector<pair<double,string>>>& graph, string& a, string& b, double factor, unordered_set<string>& visited)
    {
        if(graph.find(a) == graph.end())
        {
            return -1.0;
        }
        
        if(a==b)
        {
            return factor;
        }
        
        auto& edges=graph[a];
        for(auto& edge : edges)
        {
            if(visited.find(edge.second) == visited.end())
            {
                visited.insert(edge.second);

                double tmp=dfs(graph, edge.second, b, edge.first*factor, visited);
                if(tmp!=-1.0)
                {
                    return tmp;
                }    

                visited.erase(edge.second);    
            }
        }
        
        return -1.0;
    }
};
